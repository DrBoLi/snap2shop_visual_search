// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Product {
  id                String         @id @default(cuid())
  shopifyProductId  String
  shop              String
  handle            String?
  title             String
  description       String?
  tags              String?
  price             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  images            ProductImage[]

  @@unique([shopifyProductId, shop])
  @@index([shop])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  shop      String
  imageUrl  String
  imagePath String?
  altText   String?
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  embedding ProductEmbedding?

  @@index([productId])
  @@index([shop])
}

model SyncStatus {
  id          String    @id @default(cuid())
  shop        String    @unique
  status      String    @default("idle") // idle, syncing, completed, error
  progress    Int       @default(0)
  totalItems  Int       @default(0)
  lastSync    DateTime?
  errorMessage String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shop])
}

model ProductEmbedding {
  id        String  @id @default(cuid())
  imageId   String  @unique
  shop      String
  embedding String  // JSON string of the embedding vector
  modelName String  @default("clip-vit-base-patch32")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     ProductImage @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([shop])
  @@index([imageId])
}

model VisualSearchEvent {
  id          String   @id @default(cuid())
  shop        String
  sessionId   String?  // For user journey tracking
  eventType   String   // 'image_search', 'text_search', 'camera_capture'
  searchId    String   @unique // For linking searches to clicks
  queryData   Json?    // Store search parameters, image metadata
  results     Json?    // Store result IDs and similarity scores
  userAgent   String?
  ipAddress   String?  // For basic geo analytics
  createdAt   DateTime @default(now())
  
  @@index([shop, eventType, createdAt])
  @@index([shop, createdAt])
  @@index([searchId])
}

model SearchResultClick {
  id          String   @id @default(cuid())
  shop        String
  searchId    String   // Link to VisualSearchEvent
  sessionId   String?
  productId   String
  position    Int      // Position in results (1-based)
  similarity  Float?   // Similarity score of clicked result
  clickType   String   // 'search_result', 'recommendation', 'suggestion'
  createdAt   DateTime @default(now())
  
  @@index([shop, createdAt])
  @@index([searchId])
  @@index([productId])
}

model PopularContent {
  id          String   @id @default(cuid())
  shop        String
  contentType String   // 'keyword', 'collection', 'product', 'category'
  contentId   String
  contentName String
  clickCount  Int      @default(0)
  searchCount Int      @default(0) // How often it appears in searches
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@unique([shop, contentType, contentId])
  @@index([shop, contentType, clickCount])
  @@index([shop, lastUsed])
}

// Pre-aggregated analytics for performance
model AnalyticsAggregation {
  id          String   @id @default(cuid())
  shop        String
  date        DateTime // Date (no time component)
  period      String   // 'daily', 'weekly', 'monthly'
  metric      String   // 'searches', 'clicks', 'conversions'
  value       Int      @default(0)
  metadata    Json?    // Additional context (device, source, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([shop, date, period, metric])
  @@index([shop, date, period])
}
